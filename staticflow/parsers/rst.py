from typing import Any, Dict, Optional
from docutils.core import publish_parts
from .base import ContentParser
import re


class RSTParser(ContentParser):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è reStructuredText –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""

    def __init__(self, settings: Optional[Dict[str, Any]] = None):
        super().__init__()
        self.settings = settings or {
            'initial_header_level': 2,
            'doctitle_xform': True,
            'sectsubtitle_xform': True,
            'embed_stylesheet': False,
            'stylesheet_path': None,
            'math_output': 'MathJax',
            'smart_quotes': True,
            'halt_level': 2,
            'report_level': 1,
            'exit_status_level': 2,
            'syntax_highlight': 'short',  # –í–∞–∂–Ω–æ: –≤–∫–ª—é—á–∞–µ—Ç Pygments –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–æ–¥–∞
            'highlight_language': 'python',  # –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
            'input_encoding': 'utf-8',
            'output_encoding': 'utf-8',
        }
        # –í–ê–ñ–ù–û: –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ pygments.css –≤ —à–∞–±–ª–æ–Ω —Å–∞–π—Ç–∞!

    def parse(self, content: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç reStructuredText –≤ HTML."""
        parts = publish_parts(
            source=content,
            writer_name='html',
            settings_overrides=self.settings
        )
        html = parts['html_body']
        html = html.replace('<pre class="code', '<pre class="highlight code')

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º admonition –≤ callout Notion-style
        def admonition_to_callout(match):
            type_map = {
                'note': ('info', '‚ÑπÔ∏è'),
                'warning': ('warning', '‚ö†Ô∏è'),
                'danger': ('error', '‚õî'),
                'important': ('important', '‚ùó'),
                'tip': ('tip', 'üí°'),
                'attention': ('attention', 'üëÄ'),
            }
            ad_type = match.group(1).lower()
            notion_type, icon = type_map.get(ad_type, ('info', '‚ÑπÔ∏è'))
            title = match.group(2)
            content = match.group(3)
            return (
                f'<div class="callout {notion_type}">'
                f'<div class="callout-icon">{icon}</div>'
                f'<div class="callout-content"><strong>{title}</strong> {content.strip()}</div>'
                f'</div>'
            )

        # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ admonition-–±–ª–æ–∫–æ–≤
        html = re.sub(
            r'<div class="admonition (\w+)">.*?<p class="first admonition-title">(.*?)</p>(.*?)</div>',
            admonition_to_callout,
            html,
            flags=re.DOTALL
        )
        return html

    def set_setting(self, key: str, value: Any) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∞—Ä—Å–µ—Ä–∞ RST."""
        self.settings[key] = value
        self.options[key] = value  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–∞–∑–æ–≤—ã–º –∫–ª–∞—Å—Å–æ–º 