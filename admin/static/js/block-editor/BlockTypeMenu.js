/**
 * BlockTypeMenu - Functions for block type selection menu
 */

// Modified for non-module loading
(function() {
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–ª–æ–∫–∞
    function showBlockTypeMenu(button, blockId) {
        console.log("Showing block type menu for blockId:", blockId);
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        this.hideBlockTypeMenu();
        
        // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        const menu = document.createElement('div');
        menu.className = 'block-type-menu';
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID –±–ª–æ–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ data-–∞—Ç—Ä–∏–±—É—Ç
        // –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
        if (blockId) {
            const blockIndex = this.blocks.findIndex(block => block.id === blockId);
            console.log("Block index for position:", blockIndex);
            if (blockIndex !== -1) {
                menu.dataset.position = blockIndex + 1; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
            } else {
                menu.dataset.position = this.blocks.length; // Fallback: –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
            }
        } else {
            menu.dataset.position = this.blocks.length; // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        menu.setAttribute('data-debug', `position: ${menu.dataset.position}, blockId: ${blockId || 'none'}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—ã –±–ª–æ–∫–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
        const blockGroups = [
            {
                title: '–û—Å–Ω–æ–≤–Ω—ã–µ',
                types: [
                    { type: 'paragraph', icon: '¬∂', label: '–ü–∞—Ä–∞–≥—Ä–∞—Ñ', color: '#4dabf7' },
                    { type: 'heading1', icon: 'H1', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1', color: '#4c6ef5' },
                    { type: 'heading2', icon: 'H2', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2', color: '#4c6ef5' },
                    { type: 'heading3', icon: 'H3', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3', color: '#4c6ef5' }
                ]
            },
            {
                title: '–°–ø–∏—Å–∫–∏',
                types: [
                    { type: 'bullet-list', icon: '‚Ä¢', label: '–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫', color: '#37b24d' },
                    { type: 'numbered-list', icon: '1.', label: '–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫', color: '#37b24d' }
                ]
            },
            {
                title: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ',
                types: [
                    { type: 'quote', icon: '"', label: '–¶–∏—Ç–∞—Ç–∞', color: '#f76707' },
                    { type: 'code', icon: '</>', label: '–ë–ª–æ–∫ –∫–æ–¥–∞', color: '#ae3ec9' },
                    { type: 'math', icon: '‚àë', label: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞', color: '#ae3ec9' },
                    { type: 'diagram', icon: '‚óä', label: '–î–∏–∞–≥—Ä–∞–º–º–∞', color: '#ae3ec9' }
                ]
            },
            {
                title: '–ú–µ–¥–∏–∞',
                types: [
                    { type: 'image', icon: 'üñºÔ∏è', label: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', color: '#1098ad' },
                    { type: 'audio', icon: 'üîä', label: '–ê—É–¥–∏–æ', color: '#1098ad' },
                    { type: 'video', icon: 'üé•', label: '–í–∏–¥–µ–æ', color: '#1098ad' }
                ]
            },
            {
                title: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏',
                types: [
                    { type: 'info', icon: '‚ÑπÔ∏è', label: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', color: '#1c7ed6' },
                    { type: 'warning', icon: '‚ö†Ô∏è', label: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', color: '#f59f00' },
                    { type: 'danger', icon: '‚õî', label: '–û–ø–∞—Å–Ω–æ—Å—Ç—å', color: '#e03131' }
                ]
            }
        ];
        
        // –ü–æ–∏—Å–∫–æ–≤–æ–µ –ø–æ–ª–µ
        const searchContainer = document.createElement('div');
        searchContainer.className = 'block-type-search';
        
        const searchInput = document.createElement('input');
        searchInput.type = 'text';
        searchInput.placeholder = '–ü–æ–∏—Å–∫ –±–ª–æ–∫–æ–≤...';
        searchInput.className = 'block-type-search-input';
        
        searchContainer.appendChild(searchInput);
        menu.appendChild(searchContainer);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø –±–ª–æ–∫–æ–≤
        const groupsContainer = document.createElement('div');
        groupsContainer.className = 'block-type-groups-container';
        
        // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –º–µ–Ω—é
        blockGroups.forEach(group => {
            const groupElement = document.createElement('div');
            groupElement.className = 'block-type-group';
            
            const groupTitle = document.createElement('div');
            groupTitle.className = 'block-type-group-title';
            groupTitle.textContent = group.title;
            groupElement.appendChild(groupTitle);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–ª–æ–∫–æ–≤
            group.types.forEach(blockType => {
                const option = document.createElement('div');
                option.className = 'block-type-option';
                option.dataset.type = blockType.type;
                option.setAttribute('role', 'button');
                option.setAttribute('tabindex', '0');
                option.title = `–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫ ${blockType.label}`;
                
                const icon = document.createElement('span');
                icon.className = 'block-type-icon';
                icon.textContent = blockType.icon;
                icon.style.backgroundColor = blockType.color ? `${blockType.color}15` : '#f5f5f5'; // 15% opacity
                icon.style.color = blockType.color || '#444';
                
                const label = document.createElement('span');
                label.className = 'block-type-label';
                label.textContent = blockType.label;
                
                option.appendChild(icon);
                option.appendChild(label);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
                option.addEventListener('click', (e) => {
                    const blockType = option.dataset.type;
                    const menu = option.closest('.block-type-menu');
                    if (!menu || !menu.dataset.position) {
                        console.error("Menu element or position attribute missing during click", menu);
                        return;
                    }
                    
                    const position = parseInt(menu.dataset.position);
                    console.log("Block type option clicked directly:", blockType, "at position:", position);
                    this.addBlock(blockType, '', position);
                    this.hideBlockTypeMenu();
                    e.stopPropagation();
                });
                
                // –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                option.dataset.searchTerms = blockType.label.toLowerCase();
                
                groupElement.appendChild(option);
            });
            
            groupsContainer.appendChild(groupElement);
        });
        
        menu.appendChild(groupsContainer);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤ DOM –ø–µ—Ä–µ–¥ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        this.editorContainer.appendChild(menu);
        
        // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
        searchInput.addEventListener('input', () => {
            const searchTerm = searchInput.value.toLowerCase().trim();
            const options = menu.querySelectorAll('.block-type-option');
            const groups = menu.querySelectorAll('.block-type-group');
            
            groups.forEach(group => {
                group.style.display = 'block';
                let hasVisibleOptions = false;
                
                const groupOptions = group.querySelectorAll('.block-type-option');
                groupOptions.forEach(option => {
                    const searchTerms = option.dataset.searchTerms;
                    if (searchTerm === '' || searchTerms.includes(searchTerm)) {
                        option.style.display = 'flex';
                        hasVisibleOptions = true;
                    } else {
                        option.style.display = 'none';
                    }
                });
                
                // –°–∫—Ä—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –≤ –Ω–µ–π –Ω–µ—Ç –≤–∏–¥–∏–º—ã—Ö –æ–ø—Ü–∏–π
                if (!hasVisibleOptions) {
                    group.style.display = 'none';
                }
            });
        });
        
        // –†–∞–∑–º–µ—â–∞–µ–º –º–µ–Ω—é —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π
        const buttonRect = button.getBoundingClientRect();
        const editorRect = this.editorContainer.getBoundingClientRect();
        const blockElement = button.closest('.sf-block');
        
        menu.style.position = 'absolute';
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É –±–ª–æ–∫–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if (blockElement) {
            const blockRect = blockElement.getBoundingClientRect();
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É –±–ª–æ–∫–∞, —á—É—Ç—å –Ω–∏–∂–µ –µ–≥–æ
            menu.style.top = `${blockRect.bottom - editorRect.top + 10}px`;
            const menuWidth = Math.min(320, window.innerWidth * 0.95);
            menu.style.left = `${(blockRect.left + blockRect.right) / 2 - menuWidth/2}px`; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –º–µ–Ω—é
        } else {
            // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
            menu.style.top = `${buttonRect.bottom - editorRect.top + 5}px`;
            const menuWidth = Math.min(320, window.innerWidth * 0.95);
            menu.style.left = `${buttonRect.left - menuWidth/2}px`;
        }
        
        menu.style.zIndex = '1000';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –º–µ–Ω—é –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        setTimeout(() => {
            const menuRect = menu.getBoundingClientRect();
            
            // –ï—Å–ª–∏ –º–µ–Ω—é –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π
            if (menuRect.right > editorRect.right) {
                menu.style.left = `${Math.max(10, editorRect.right - menuRect.width - 20)}px`;
            }
            
            // –ï—Å–ª–∏ –º–µ–Ω—é –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ª–µ–≤—ã–π –∫—Ä–∞–π
            if (menuRect.left < editorRect.left) {
                menu.style.left = `${editorRect.left + 10}px`;
            }
            
            // –ï—Å–ª–∏ –º–µ–Ω—é –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
            if (menuRect.bottom > window.innerHeight) {
                // –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ —Å–Ω–∏–∑—É, —Ä–∞–∑–º–µ—â–∞–µ–º –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π
                if (blockElement) {
                    const blockRect = blockElement.getBoundingClientRect();
                    menu.style.top = `${blockRect.top - editorRect.top - menuRect.height - 10}px`;
                } else {
                    menu.style.top = `${buttonRect.top - editorRect.top - menuRect.height - 10}px`;
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º CSS-–∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            menu.classList.add('block-type-menu-positioned');
            
            // –§–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫–æ–≤–æ–º –ø–æ–ª–µ
            searchInput.focus();
        }, 0);
    }
    
    // –°–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–ª–æ–∫–∞
    function hideBlockTypeMenu() {
        const menu = this.editorContainer.querySelector('.block-type-menu');
        if (menu) {
            console.log("Removing block type menu");
            menu.remove();
        }
    }
    
    // Expose to global scope
    window.showBlockTypeMenu = showBlockTypeMenu;
    window.hideBlockTypeMenu = hideBlockTypeMenu;
})(); 