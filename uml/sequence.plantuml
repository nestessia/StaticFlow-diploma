@startuml
participant "Разработчик" as dev
participant "Админка" as admin
participant "Движок" as engine
participant "Сайт" as site
participant "Тема" as theme
participant "Шаблон" as template
participant "Страница" as page
participant "Редактор" as editor
participant "ПарсерМенеджер" as parser_manager
participant "Парсер" as parser
participant "Плагин" as plugin
participant "Кэш" as cache
participant "Деплой" as deploy

' Инициализация
dev -> engine: инициализировать(исходная_папка, выходная_папка, папка_шаблонов)
engine -> site: установить_папки()
engine -> theme: загрузить()
theme -> template: загрузить()
engine -> cache: инициализировать(время_жизни=3600, максимальный_размер=1000)

' Настройка компонентов
dev -> engine: добавить_парсер(расширение, парсер)
dev -> engine: добавить_плагин(плагин)
engine -> plugin: инициализировать()

' Работа через админку
dev -> admin: запустить()
activate admin

admin -> editor: открыть_страницу()
editor -> page: загрузить()
editor -> cache: получить_кэшированный_предпросмотр()
alt кэш найден
    cache --> editor: кэшированный_предпросмотр
else кэш не найден
    editor -> page: получить_содержимое()
    page --> editor: содержимое
    editor -> cache: сохранить_предпросмотр_в_кэш(содержимое)
end

editor -> page: сохранить_изменения(контент)
page -> page: добавить_в_историю(контент, автор)
page -> editor: обновить_предпросмотр()
editor -> cache: сохранить_предпросмотр_в_кэш(предпросмотр)

' История изменений
editor -> page: получить_историю_изменений()
page -> page: получить_все_версии()
page --> editor: список_версий
editor -> page: откатить_к_версии(id_версии)
page -> page: получить_версию(id_версии)
page --> editor: содержимое_версии
editor -> page: сохранить_изменения(содержимое_версии)

' Разработчик добавляет файл
dev -> site: добавить_файл("статья.md")

' Процесс сборки
dev -> engine: собрать()
activate engine

engine -> site: загрузить_страницы()
site -> page: загрузить()

' Автоматическое определение парсера
page -> parser_manager: получить_парсер(".md")
parser_manager -> parser_manager: определить_парсер_по_расширению()
alt парсер найден
    parser_manager --> page: markdown_парсер
    page -> parser: разобрать(содержимое)
    parser --> page: метаданные, контент
else парсер не найден
    parser_manager -> dev: ошибка("Парсер для расширения .md не найден")
    dev -> engine: добавить_парсер(".md", markdown_парсер)
    engine -> parser_manager: добавить_парсер(".md", markdown_парсер)
    parser_manager --> page: markdown_парсер
    page -> parser: разобрать(содержимое)
    parser --> page: метаданные, контент
end

engine -> theme: применить()
engine -> plugin: обработать_сайт(сайт)

loop для каждой страницы
    page -> cache: получить(ключ_страницы)
    alt кэш найден и действителен
        cache --> page: кэшированное_содержимое
    else кэш не найден или устарел
        page -> template: отрендерить(данные)
        page -> plugin: обработать_контент(контент)
        page -> cache: установить(ключ_страницы, содержимое, время_жизни=3600)
    end
    engine -> plugin: обработать_страницу(страница)
end

engine -> site: копировать_статические_файлы()
engine --> dev: сборка завершена
deactivate engine

' Публикация
dev -> deploy: настроить(настройки)
dev -> deploy: опубликовать()
activate deploy
deploy -> deploy: отправить_на_github()
deploy --> dev: публикация завершена
deactivate deploy

' Очистка
dev -> engine: очистить()
engine -> site: очистить()
engine -> cache: очистить()
engine -> plugin: очистить()
engine -> theme: очистить()

deactivate admin

@enduml